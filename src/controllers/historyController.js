const Store = require("../models/Store");
const User = require("../models/User"); // Modelo do usu√°rio

/**
 * üìò Salvar uma nova hist√≥ria
 */
/*const saveHistory = async (req, res) => {
  try {
    const { idUser } = req.params;
    const { title, text } = req.body;

    // Valida√ß√£o b√°sica
    if (!idUser || !title?.trim() || !text?.trim()) {
      return res.status(400).json({
        success: false,
        message: "Campos obrigat√≥rios ausentes: t√≠tulo, texto ou usu√°rio.",
      });
    }

    // üîç Verifica se o usu√°rio existe
    const userExists = await User.findById(idUser);
    if (!userExists) {
      return res.status(404).json({
        success: false,
        message: "Usu√°rio n√£o encontrado.",
      });
    }

    // Cria e salva a nova hist√≥ria
    const newHistory = await Store.create({ title, text, idUser });

    return res.status(201).json({
      success: true,
      message: "Hist√≥ria salva com sucesso!",
      data: newHistory,
    });
  } catch (error) {
    console.error("‚ùå Erro ao salvar hist√≥ria:", error);
    return res.status(500).json({
      success: false,
      message: "Erro interno ao salvar hist√≥ria.",
      error: error.message,
    });
  }
};*/

/**
 * üìò Salvar uma √∫nica hist√≥ria combinando v√°rias hist√≥rias do localStorage
 */
const saveHistory = async (req, res) => {
  try {
    const { idUser } = req.params;
    const { titles, texts } = req.body;

    // üß© Valida√ß√£o dos campos recebidos
    if (!idUser || !titles || !texts) {
      return res.status(400).json({
        success: false,
        message: "Campos obrigat√≥rios ausentes: t√≠tulo, texto ou usu√°rio.",
      });
    }

    // üë§ Verifica se o usu√°rio existe
    const userExists = await User.findById(idUser);
    if (!userExists) {
      return res.status(404).json({
        success: false,
        message: "Usu√°rio n√£o encontrado.",
      });
    }

    // üíæ Cria e salva a nova hist√≥ria combinada
    const newHistory = await Store.create({
      idUser,
      title: titles.trim(),
      text: texts.trim(),
    });

    return res.status(201).json({
      success: true,
      message: "Hist√≥ria combinada salva com sucesso!",
      data: newHistory,
    });
  } catch (error) {
    console.error("‚ùå Erro ao salvar hist√≥ria combinada:", error);
    return res.status(500).json({
      success: false,
      message: "Erro interno ao salvar hist√≥ria combinada.",
      error: error.message,
    });
  }
};

/**
 * üìö Listar todas as hist√≥rias de um usu√°rio
 */
const getUserHistories = async (req, res) => {
  try {
    const { idUser } = req.params;

    if (!idUser) {
      return res.status(400).json({
        success: false,
        message: "O ID do usu√°rio √© obrigat√≥rio.",
      });
    }

    // Verifica se usu√°rio existe
    const userExists = await User.findById(idUser);
    if (!userExists) {
      return res.status(404).json({
        success: false,
        message: "Usu√°rio n√£o encontrado.",
      });
    }

    const histories = await Store.find({ idUser })
      .sort({ createdAt: -1 })
      .select("-__v"); // remove o campo __v

    return res.status(200).json({
      success: true,
      count: histories.length,
      data: histories,
    });
  } catch (error) {
    console.error("‚ùå Erro ao buscar hist√≥rias:", error);
    return res.status(500).json({
      success: false,
      message: "Erro ao buscar hist√≥rias.",
      error: error.message,
    });
  }
};

/**
 * üóëÔ∏è Excluir uma hist√≥ria espec√≠fica
 */
const deleteHistory = async (req, res) => {
  try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({
        success: false,
        message: "O ID da hist√≥ria √© obrigat√≥rio para exclus√£o.",
      });
    }

    const deleted = await Store.findByIdAndDelete(id);

    if (!deleted) {
      return res.status(404).json({
        success: false,
        message: "Hist√≥ria n√£o encontrada.",
      });
    }

    return res.status(200).json({
      success: true,
      message: "Hist√≥ria exclu√≠da com sucesso!",
    });
  } catch (error) {
    console.error("‚ùå Erro ao excluir hist√≥ria:", error);
    return res.status(500).json({
      success: false,
      message: "Erro ao excluir hist√≥ria.",
      error: error.message,
    });
  }
};

module.exports = {
  saveHistory,
  getUserHistories,
  deleteHistory,
};
