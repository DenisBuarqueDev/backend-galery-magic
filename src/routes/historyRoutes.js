const express  = require("express");
const { body, param }  = require("express-validator");
const {
  saveHistory,
  getUserHistories,
  deleteHistory,
}  = require("../controllers/historyController.js");
const protect  = require("../middlewares/authMiddleware.js");

const router = express.Router();

/**
 * üîí Aplica o middleware de autentica√ß√£o em todas as rotas
 */
router.use(protect);

/**
 * ‚úÖ Valida√ß√µes comuns para cria√ß√£o de hist√≥rias
 */
const validateHistory = [
  body("title")
    .trim()
    .notEmpty()
    .withMessage("O t√≠tulo √© obrigat√≥rio.")
    .isLength({ min: 2, max: 100 })
    .withMessage("O t√≠tulo deve ter entre 2 e 100 caracteres."),
  body("text")
    .trim()
    .notEmpty()
    .withMessage("O texto da hist√≥ria √© obrigat√≥rio."),
  body("idUser")
    .trim()
    .notEmpty()
    .withMessage("O ID do usu√°rio √© obrigat√≥rio.")
    .isMongoId()
    .withMessage("O ID do usu√°rio deve ser um ObjectId v√°lido."),
];

/**
 * ‚úÖ Rota: Criar nova hist√≥ria
 * M√©todo: POST /api/histories
 */
router.post("/", validateHistory, saveHistory);

/**
 * ‚úÖ Rota: Listar todas as hist√≥rias de um usu√°rio
 * M√©todo: GET /api/histories/:idUser
 */
router.get(
  "/:idUser",
  param("idUser")
    .isMongoId()
    .withMessage("O ID do usu√°rio deve ser v√°lido."),
  getUserHistories
);

/**
 * ‚úÖ Rota: Deletar uma hist√≥ria espec√≠fica
 * M√©todo: DELETE /api/histories/:id
 */
router.delete(
  "/:id",
  param("id")
    .isMongoId()
    .withMessage("O ID da hist√≥ria deve ser v√°lido."),
  deleteHistory
);

module.exports = router;

