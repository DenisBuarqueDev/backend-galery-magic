const mongoose = require("mongoose");

const historySchema = new mongoose.Schema(
  {
    // üîó ID do usu√°rio que criou a hist√≥ria (refer√™ncia ao model User)
    idUser: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: [true, "O ID do usu√°rio √© obrigat√≥rio."],
      index: true, // melhora consultas por usu√°rio
    },

    // üè∑Ô∏è T√≠tulo da hist√≥ria (resumo ou palavras-chave)
    title: {
      type: String,
      required: [true, "O t√≠tulo √© obrigat√≥rio."],
      trim: true,
      minlength: [3, "O t√≠tulo deve ter pelo menos 3 caracteres."],
      maxlength: [120, "O t√≠tulo n√£o pode ultrapassar 120 caracteres."],
    },

    // üìú Texto completo da hist√≥ria
    text: {
      type: String,
      required: [true, "O texto da hist√≥ria √© obrigat√≥rio."],
      trim: true,
      minlength: [10, "A hist√≥ria deve ter pelo menos 10 caracteres."],
    },
  },
  {
    timestamps: true, // cria createdAt e updatedAt automaticamente
    versionKey: false, // remove o campo __v
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

// üß© Virtual: URL de acesso direto √† hist√≥ria
historySchema.virtual("url").get(function () {
  return `/api/stories/${this._id}`;
});

// üßπ Middleware: garante que t√≠tulo e texto estejam limpos
historySchema.pre("save", function (next) {
  if (this.text) this.text = this.text.trim();
  if (this.title) this.title = this.title.trim();
  next();
});

// üì¶ Indexes otimizam performance em consultas frequentes
historySchema.index({ idUser: 1, createdAt: -1 }); // hist√≥rias por usu√°rio ordenadas por data
historySchema.index({ title: "text", text: "text" }); // busca full-text

module.exports = mongoose.model("History", historySchema);
